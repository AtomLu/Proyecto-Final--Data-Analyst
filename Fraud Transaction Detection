{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "56d24245",
   "metadata": {},
   "source": [
    "#### Import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "504f2d28",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np \n",
    "import seaborn as sns\n",
    "\n",
    "import plotly.express as px\n",
    "import random as random\n",
    "from matplotlib import cm\n",
    "from matplotlib import colors\n",
    "import seaborn as sns\n",
    "from sklearn.cluster import KMeans\n",
    "import xgboost as xgb\n",
    "\n",
    "\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "from sklearn.model_selection import train_test_split as tts\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.linear_model import LogisticRegression as LogReg\n",
    "from sklearn.ensemble import RandomForestClassifier as RFC\n",
    "from xgboost import XGBClassifier as XGBC\n",
    "from sklearn.metrics import balanced_accuracy_score as balacc\n",
    "from sklearn.metrics import precision_score as prec\n",
    "from sklearn.metrics import recall_score as rec\n",
    "from sklearn.metrics import f1_score as f1\n",
    "from sklearn.metrics import confusion_matrix as cm\n",
    "from sklearn.metrics import accuracy_score as acc\n",
    "logreg=LogReg (max_iter=500)\n",
    "rfc=RFC(n_estimators=500)\n",
    "xgbc=XGBC()\n",
    "svr=SVR()\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6c5546f",
   "metadata": {},
   "source": [
    "## LOADING DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cb911aba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>nameOrig</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>nameDest</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "      <th>isFlaggedFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>9839.64</td>\n",
       "      <td>C1231006815</td>\n",
       "      <td>170136.00</td>\n",
       "      <td>160296.36</td>\n",
       "      <td>M1979787155</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>1864.28</td>\n",
       "      <td>C1666544295</td>\n",
       "      <td>21249.00</td>\n",
       "      <td>19384.72</td>\n",
       "      <td>M2044282225</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C1305486145</td>\n",
       "      <td>181.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>C553264065</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C840083671</td>\n",
       "      <td>181.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>C38997010</td>\n",
       "      <td>21182.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>11668.14</td>\n",
       "      <td>C2048537720</td>\n",
       "      <td>41554.00</td>\n",
       "      <td>29885.86</td>\n",
       "      <td>M1230701703</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>7817.71</td>\n",
       "      <td>C90045638</td>\n",
       "      <td>53860.00</td>\n",
       "      <td>46042.29</td>\n",
       "      <td>M573487274</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>7107.77</td>\n",
       "      <td>C154988899</td>\n",
       "      <td>183195.00</td>\n",
       "      <td>176087.23</td>\n",
       "      <td>M408069119</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>7861.64</td>\n",
       "      <td>C1912850431</td>\n",
       "      <td>176087.23</td>\n",
       "      <td>168225.59</td>\n",
       "      <td>M633326333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>4024.36</td>\n",
       "      <td>C1265012928</td>\n",
       "      <td>2671.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>M1176932104</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>DEBIT</td>\n",
       "      <td>5337.77</td>\n",
       "      <td>C712410124</td>\n",
       "      <td>41720.00</td>\n",
       "      <td>36382.23</td>\n",
       "      <td>C195600860</td>\n",
       "      <td>41898.0</td>\n",
       "      <td>40348.79</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n",
       "0     1   PAYMENT   9839.64  C1231006815      170136.00       160296.36   \n",
       "1     1   PAYMENT   1864.28  C1666544295       21249.00        19384.72   \n",
       "2     1  TRANSFER    181.00  C1305486145         181.00            0.00   \n",
       "3     1  CASH_OUT    181.00   C840083671         181.00            0.00   \n",
       "4     1   PAYMENT  11668.14  C2048537720       41554.00        29885.86   \n",
       "5     1   PAYMENT   7817.71    C90045638       53860.00        46042.29   \n",
       "6     1   PAYMENT   7107.77   C154988899      183195.00       176087.23   \n",
       "7     1   PAYMENT   7861.64  C1912850431      176087.23       168225.59   \n",
       "8     1   PAYMENT   4024.36  C1265012928        2671.00            0.00   \n",
       "9     1     DEBIT   5337.77   C712410124       41720.00        36382.23   \n",
       "\n",
       "      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n",
       "0  M1979787155             0.0            0.00        0               0  \n",
       "1  M2044282225             0.0            0.00        0               0  \n",
       "2   C553264065             0.0            0.00        1               0  \n",
       "3    C38997010         21182.0            0.00        1               0  \n",
       "4  M1230701703             0.0            0.00        0               0  \n",
       "5   M573487274             0.0            0.00        0               0  \n",
       "6   M408069119             0.0            0.00        0               0  \n",
       "7   M633326333             0.0            0.00        0               0  \n",
       "8  M1176932104             0.0            0.00        0               0  \n",
       "9   C195600860         41898.0        40348.79        0               0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments = pd.read_csv(\"payments_fraud.csv\")\n",
    "payments.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58829b46",
   "metadata": {},
   "source": [
    "### Columns Description"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c945e3f9",
   "metadata": {},
   "source": [
    " - **step**: maps a unit of time in the real world. In this case 1 step is 1 hour of time. Total steps 744 (30 days simulation).\n",
    "\n",
    " - **type**: CASH-IN, CASH-OUT, DEBIT, PAYMENT and TRANSFER.\n",
    "\n",
    " - **amount**: amount of the transaction in local currency.\n",
    "\n",
    " - **nameOrig**: customer who started the transaction.\n",
    "\n",
    " - **oldbalanceOrg**: initial balance before the transaction.\n",
    "\n",
    " - **newbalanceOrig**: new balance after the transaction.\n",
    "\n",
    " - **nameDest**: customer who is the recipient of the transaction.\n",
    "\n",
    " - **oldbalanceDest**: initial balance recipient before the transaction. \n",
    "\n",
    " - **newbalanceDest**: new balance recipient after the transaction. \n",
    "\n",
    " - **isFraud**: This is the transactions made by the fraudulent agents inside the simulation. In this specific dataset the fraudulent behavior of the agents aims to profit by taking control or customers accounts and try to empty the funds by transferring to another account and then cashing out of the system.\n",
    "\n",
    " - **sFlaggedFraud**: The business model aims to control massive transfers from one account to another and flags illegal attempts."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6cb5b0b",
   "metadata": {},
   "source": [
    "#### DATA TYPES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b34cf7db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6362620 entries, 0 to 6362619\n",
      "Data columns (total 11 columns):\n",
      " #   Column          Dtype  \n",
      "---  ------          -----  \n",
      " 0   step            int64  \n",
      " 1   type            object \n",
      " 2   amount          float64\n",
      " 3   nameOrig        object \n",
      " 4   oldbalanceOrg   float64\n",
      " 5   newbalanceOrig  float64\n",
      " 6   nameDest        object \n",
      " 7   oldbalanceDest  float64\n",
      " 8   newbalanceDest  float64\n",
      " 9   isFraud         int64  \n",
      " 10  isFlaggedFraud  int64  \n",
      "dtypes: float64(5), int64(3), object(3)\n",
      "memory usage: 534.0+ MB\n"
     ]
    }
   ],
   "source": [
    "payments.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e86ef9d",
   "metadata": {},
   "source": [
    "## Exploring & Cleaning Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d23658ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>nameOrig</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>nameDest</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "      <th>isFlaggedFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>9839.64</td>\n",
       "      <td>C1231006815</td>\n",
       "      <td>170136.0</td>\n",
       "      <td>160296.36</td>\n",
       "      <td>M1979787155</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>1864.28</td>\n",
       "      <td>C1666544295</td>\n",
       "      <td>21249.0</td>\n",
       "      <td>19384.72</td>\n",
       "      <td>M2044282225</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C1305486145</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>C553264065</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C840083671</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>C38997010</td>\n",
       "      <td>21182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>11668.14</td>\n",
       "      <td>C2048537720</td>\n",
       "      <td>41554.0</td>\n",
       "      <td>29885.86</td>\n",
       "      <td>M1230701703</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n",
       "0     1   PAYMENT   9839.64  C1231006815       170136.0       160296.36   \n",
       "1     1   PAYMENT   1864.28  C1666544295        21249.0        19384.72   \n",
       "2     1  TRANSFER    181.00  C1305486145          181.0            0.00   \n",
       "3     1  CASH_OUT    181.00   C840083671          181.0            0.00   \n",
       "4     1   PAYMENT  11668.14  C2048537720        41554.0        29885.86   \n",
       "\n",
       "      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n",
       "0  M1979787155             0.0             0.0        0               0  \n",
       "1  M2044282225             0.0             0.0        0               0  \n",
       "2   C553264065             0.0             0.0        1               0  \n",
       "3    C38997010         21182.0             0.0        1               0  \n",
       "4  M1230701703             0.0             0.0        0               0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8f134657",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>nameOrig</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>nameDest</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "      <th>isFlaggedFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6362615</th>\n",
       "      <td>743</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>339682.13</td>\n",
       "      <td>C786484425</td>\n",
       "      <td>339682.13</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C776919290</td>\n",
       "      <td>0.00</td>\n",
       "      <td>339682.13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362616</th>\n",
       "      <td>743</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>6311409.28</td>\n",
       "      <td>C1529008245</td>\n",
       "      <td>6311409.28</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1881841831</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362617</th>\n",
       "      <td>743</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>6311409.28</td>\n",
       "      <td>C1162922333</td>\n",
       "      <td>6311409.28</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1365125890</td>\n",
       "      <td>68488.84</td>\n",
       "      <td>6379898.11</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362618</th>\n",
       "      <td>743</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>850002.52</td>\n",
       "      <td>C1685995037</td>\n",
       "      <td>850002.52</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C2080388513</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362619</th>\n",
       "      <td>743</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>850002.52</td>\n",
       "      <td>C1280323807</td>\n",
       "      <td>850002.52</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C873221189</td>\n",
       "      <td>6510099.11</td>\n",
       "      <td>7360101.63</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         step      type      amount     nameOrig  oldbalanceOrg  \\\n",
       "6362615   743  CASH_OUT   339682.13   C786484425      339682.13   \n",
       "6362616   743  TRANSFER  6311409.28  C1529008245     6311409.28   \n",
       "6362617   743  CASH_OUT  6311409.28  C1162922333     6311409.28   \n",
       "6362618   743  TRANSFER   850002.52  C1685995037      850002.52   \n",
       "6362619   743  CASH_OUT   850002.52  C1280323807      850002.52   \n",
       "\n",
       "         newbalanceOrig     nameDest  oldbalanceDest  newbalanceDest  isFraud  \\\n",
       "6362615             0.0   C776919290            0.00       339682.13        1   \n",
       "6362616             0.0  C1881841831            0.00            0.00        1   \n",
       "6362617             0.0  C1365125890        68488.84      6379898.11        1   \n",
       "6362618             0.0  C2080388513            0.00            0.00        1   \n",
       "6362619             0.0   C873221189      6510099.11      7360101.63        1   \n",
       "\n",
       "         isFlaggedFraud  \n",
       "6362615               0  \n",
       "6362616               0  \n",
       "6362617               0  \n",
       "6362618               0  \n",
       "6362619               0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "85c98070",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = ['CASH-OUT', 'PAYMENT', 'CASH-IN', 'TRANSFER ', 'DEBIT ']\n",
    "size = [2237500, 2151495, 1399284, 532909, 41432]\n",
    "colors = ['cornflowerblue', 'violet', 'darkturquoise', 'pink', 'hotpink']\n",
    "explode = [0.1, 0.1, 0.1, 0.1, 0.1]\n",
    "\n",
    "plt.rcParams['figure.figsize'] = (10, 10)\n",
    "plt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True)\n",
    "plt.title('Types of money transactions', fontsize = 20)\n",
    "plt.axis('off')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eeea6c05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "step              0\n",
       "type              0\n",
       "amount            0\n",
       "nameOrig          0\n",
       "oldbalanceOrg     0\n",
       "newbalanceOrig    0\n",
       "nameDest          0\n",
       "oldbalanceDest    0\n",
       "newbalanceDest    0\n",
       "isFraud           0\n",
       "isFlaggedFraud    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.isna().sum() # No hay nulos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "86bcc1a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "payments['type'] = payments.type.apply(lambda x : x.replace(\"_\", \"-\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6ae4adb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "payments.rename(columns={'nameOrig': 'name_Orig','newbalanceOrig': 'new_balance_Orig','oldbalanceOrg': 'old_balance_Org',\n",
    "                         'oldbalanceDest': 'old_balance_Dest','newbalanceDest': 'new_balance_Dest','isFlaggedFraud': 'is_Flagged_Fraud',\n",
    "                         'isFraud': 'is_Fraud','nameDest':'name_Dest'}, inplace= True)\n",
    "                                               "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5d0cb0d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    16\n",
       "Name: is_Fraud, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.loc[(payments.amount == 0.00)].is_Fraud.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f96a1ddd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    6354407\n",
       "1       8197\n",
       "Name: is_Fraud, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.loc[(payments.amount > 0.00)].is_Fraud.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "301e5e8a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "adbfe6b4",
   "metadata": {},
   "source": [
    "As a first insght, we can observe that whenever there's an amount of 0.00 it's fraud. On the other hand we see that for payments greater than cero we have 8197 that are actual fraud and 6354407 that are not fraud."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a91fe5a8",
   "metadata": {},
   "source": [
    "## Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a4792133",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "92445516.64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.amount.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "425fac8c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=\"is_Fraud\", data=payments, color = 'Violet');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64016693",
   "metadata": {},
   "source": [
    "Highest operation in the dataset. Almost 100M."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57f27318",
   "metadata": {},
   "source": [
    "## Description Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "97501254",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_attributes = payments.select_dtypes(exclude='object')\n",
    "cat_attributes = payments.select_dtypes(include='object')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "df701f7d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>amount</th>\n",
       "      <th>old_balance_Org</th>\n",
       "      <th>new_balance_Orig</th>\n",
       "      <th>old_balance_Dest</th>\n",
       "      <th>new_balance_Dest</th>\n",
       "      <th>is_Fraud</th>\n",
       "      <th>is_Flagged_Fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.433972e+02</td>\n",
       "      <td>1.798619e+05</td>\n",
       "      <td>8.338831e+05</td>\n",
       "      <td>8.551137e+05</td>\n",
       "      <td>1.100702e+06</td>\n",
       "      <td>1.224996e+06</td>\n",
       "      <td>1.290820e-03</td>\n",
       "      <td>2.514687e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.423320e+02</td>\n",
       "      <td>6.038582e+05</td>\n",
       "      <td>2.888243e+06</td>\n",
       "      <td>2.924049e+06</td>\n",
       "      <td>3.399180e+06</td>\n",
       "      <td>3.674129e+06</td>\n",
       "      <td>3.590480e-02</td>\n",
       "      <td>1.585775e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.560000e+02</td>\n",
       "      <td>1.338957e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.390000e+02</td>\n",
       "      <td>7.487194e+04</td>\n",
       "      <td>1.420800e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.327057e+05</td>\n",
       "      <td>2.146614e+05</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.350000e+02</td>\n",
       "      <td>2.087215e+05</td>\n",
       "      <td>1.073152e+05</td>\n",
       "      <td>1.442584e+05</td>\n",
       "      <td>9.430367e+05</td>\n",
       "      <td>1.111909e+06</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.430000e+02</td>\n",
       "      <td>9.244552e+07</td>\n",
       "      <td>5.958504e+07</td>\n",
       "      <td>4.958504e+07</td>\n",
       "      <td>3.560159e+08</td>\n",
       "      <td>3.561793e+08</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               step        amount  old_balance_Org  new_balance_Orig  \\\n",
       "count  6.362620e+06  6.362620e+06     6.362620e+06      6.362620e+06   \n",
       "mean   2.433972e+02  1.798619e+05     8.338831e+05      8.551137e+05   \n",
       "std    1.423320e+02  6.038582e+05     2.888243e+06      2.924049e+06   \n",
       "min    1.000000e+00  0.000000e+00     0.000000e+00      0.000000e+00   \n",
       "25%    1.560000e+02  1.338957e+04     0.000000e+00      0.000000e+00   \n",
       "50%    2.390000e+02  7.487194e+04     1.420800e+04      0.000000e+00   \n",
       "75%    3.350000e+02  2.087215e+05     1.073152e+05      1.442584e+05   \n",
       "max    7.430000e+02  9.244552e+07     5.958504e+07      4.958504e+07   \n",
       "\n",
       "       old_balance_Dest  new_balance_Dest      is_Fraud  is_Flagged_Fraud  \n",
       "count      6.362620e+06      6.362620e+06  6.362620e+06      6.362620e+06  \n",
       "mean       1.100702e+06      1.224996e+06  1.290820e-03      2.514687e-06  \n",
       "std        3.399180e+06      3.674129e+06  3.590480e-02      1.585775e-03  \n",
       "min        0.000000e+00      0.000000e+00  0.000000e+00      0.000000e+00  \n",
       "25%        0.000000e+00      0.000000e+00  0.000000e+00      0.000000e+00  \n",
       "50%        1.327057e+05      2.146614e+05  0.000000e+00      0.000000e+00  \n",
       "75%        9.430367e+05      1.111909e+06  0.000000e+00      0.000000e+00  \n",
       "max        3.560159e+08      3.561793e+08  1.000000e+00      1.000000e+00  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "757199b8",
   "metadata": {},
   "source": [
    "### Numerical Attributes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "83bf8433",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>amount</th>\n",
       "      <th>old_balance_Org</th>\n",
       "      <th>new_balance_Orig</th>\n",
       "      <th>old_balance_Dest</th>\n",
       "      <th>new_balance_Dest</th>\n",
       "      <th>is_Fraud</th>\n",
       "      <th>is_Flagged_Fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.433972e+02</td>\n",
       "      <td>1.798619e+05</td>\n",
       "      <td>8.338831e+05</td>\n",
       "      <td>8.551137e+05</td>\n",
       "      <td>1.100702e+06</td>\n",
       "      <td>1.224996e+06</td>\n",
       "      <td>1.290820e-03</td>\n",
       "      <td>2.514687e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.423320e+02</td>\n",
       "      <td>6.038582e+05</td>\n",
       "      <td>2.888243e+06</td>\n",
       "      <td>2.924049e+06</td>\n",
       "      <td>3.399180e+06</td>\n",
       "      <td>3.674129e+06</td>\n",
       "      <td>3.590480e-02</td>\n",
       "      <td>1.585775e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.560000e+02</td>\n",
       "      <td>1.338957e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.390000e+02</td>\n",
       "      <td>7.487194e+04</td>\n",
       "      <td>1.420800e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.327057e+05</td>\n",
       "      <td>2.146614e+05</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.350000e+02</td>\n",
       "      <td>2.087215e+05</td>\n",
       "      <td>1.073152e+05</td>\n",
       "      <td>1.442584e+05</td>\n",
       "      <td>9.430367e+05</td>\n",
       "      <td>1.111909e+06</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.430000e+02</td>\n",
       "      <td>9.244552e+07</td>\n",
       "      <td>5.958504e+07</td>\n",
       "      <td>4.958504e+07</td>\n",
       "      <td>3.560159e+08</td>\n",
       "      <td>3.561793e+08</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>range</th>\n",
       "      <td>7.420000e+02</td>\n",
       "      <td>9.244552e+07</td>\n",
       "      <td>5.958504e+07</td>\n",
       "      <td>4.958504e+07</td>\n",
       "      <td>3.560159e+08</td>\n",
       "      <td>3.561793e+08</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>variation coefficient</th>\n",
       "      <td>5.847723e-01</td>\n",
       "      <td>3.357344e+00</td>\n",
       "      <td>3.463606e+00</td>\n",
       "      <td>3.419485e+00</td>\n",
       "      <td>3.088194e+00</td>\n",
       "      <td>2.999298e+00</td>\n",
       "      <td>2.781548e+01</td>\n",
       "      <td>6.306051e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>skew</th>\n",
       "      <td>3.751769e-01</td>\n",
       "      <td>3.099395e+01</td>\n",
       "      <td>5.249136e+00</td>\n",
       "      <td>5.176884e+00</td>\n",
       "      <td>1.992176e+01</td>\n",
       "      <td>1.935230e+01</td>\n",
       "      <td>2.777954e+01</td>\n",
       "      <td>6.306036e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>kurtosis</th>\n",
       "      <td>3.290706e-01</td>\n",
       "      <td>1.797957e+03</td>\n",
       "      <td>3.296488e+01</td>\n",
       "      <td>3.206698e+01</td>\n",
       "      <td>9.486741e+02</td>\n",
       "      <td>8.621565e+02</td>\n",
       "      <td>7.697030e+02</td>\n",
       "      <td>3.976591e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               step        amount  old_balance_Org  \\\n",
       "count                  6.362620e+06  6.362620e+06     6.362620e+06   \n",
       "mean                   2.433972e+02  1.798619e+05     8.338831e+05   \n",
       "std                    1.423320e+02  6.038582e+05     2.888243e+06   \n",
       "min                    1.000000e+00  0.000000e+00     0.000000e+00   \n",
       "25%                    1.560000e+02  1.338957e+04     0.000000e+00   \n",
       "50%                    2.390000e+02  7.487194e+04     1.420800e+04   \n",
       "75%                    3.350000e+02  2.087215e+05     1.073152e+05   \n",
       "max                    7.430000e+02  9.244552e+07     5.958504e+07   \n",
       "range                  7.420000e+02  9.244552e+07     5.958504e+07   \n",
       "variation coefficient  5.847723e-01  3.357344e+00     3.463606e+00   \n",
       "skew                   3.751769e-01  3.099395e+01     5.249136e+00   \n",
       "kurtosis               3.290706e-01  1.797957e+03     3.296488e+01   \n",
       "\n",
       "                       new_balance_Orig  old_balance_Dest  new_balance_Dest  \\\n",
       "count                      6.362620e+06      6.362620e+06      6.362620e+06   \n",
       "mean                       8.551137e+05      1.100702e+06      1.224996e+06   \n",
       "std                        2.924049e+06      3.399180e+06      3.674129e+06   \n",
       "min                        0.000000e+00      0.000000e+00      0.000000e+00   \n",
       "25%                        0.000000e+00      0.000000e+00      0.000000e+00   \n",
       "50%                        0.000000e+00      1.327057e+05      2.146614e+05   \n",
       "75%                        1.442584e+05      9.430367e+05      1.111909e+06   \n",
       "max                        4.958504e+07      3.560159e+08      3.561793e+08   \n",
       "range                      4.958504e+07      3.560159e+08      3.561793e+08   \n",
       "variation coefficient      3.419485e+00      3.088194e+00      2.999298e+00   \n",
       "skew                       5.176884e+00      1.992176e+01      1.935230e+01   \n",
       "kurtosis                   3.206698e+01      9.486741e+02      8.621565e+02   \n",
       "\n",
       "                           is_Fraud  is_Flagged_Fraud  \n",
       "count                  6.362620e+06      6.362620e+06  \n",
       "mean                   1.290820e-03      2.514687e-06  \n",
       "std                    3.590480e-02      1.585775e-03  \n",
       "min                    0.000000e+00      0.000000e+00  \n",
       "25%                    0.000000e+00      0.000000e+00  \n",
       "50%                    0.000000e+00      0.000000e+00  \n",
       "75%                    0.000000e+00      0.000000e+00  \n",
       "max                    1.000000e+00      1.000000e+00  \n",
       "range                  1.000000e+00      1.000000e+00  \n",
       "variation coefficient  2.781548e+01      6.306051e+02  \n",
       "skew                   2.777954e+01      6.306036e+02  \n",
       "kurtosis               7.697030e+02      3.976591e+05  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "describe = num_attributes.describe().T\n",
    "\n",
    "#describe['prueba'] = num_attributes.median().tolist()\n",
    "\n",
    "describe['range'] = (num_attributes.max() - num_attributes.min()).tolist()\n",
    "describe['variation coefficient'] = (num_attributes.std() / num_attributes.mean()).tolist()\n",
    "describe['skew'] = num_attributes.skew().tolist()\n",
    "describe['kurtosis'] = num_attributes.kurtosis().tolist()\n",
    "\n",
    "\n",
    "describe.T\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6a72226",
   "metadata": {},
   "source": [
    "- All the data has a coeficient of variation greater than 25%, therefore they aren't homogeneous.\n",
    "\n",
    "- The step variable starts from 1 hour to 742 hour (30 days).\n",
    "\n",
    "- Some variables are higher shap and right skewed.\n",
    "\n",
    "- 25% of the newbalanceorig is 0. Maybe there are some transfers that don't go to the destination.\n",
    "\n",
    "- All data in general has high kurtosis it is telling us that the dataset tend to have heavy tails (outliers).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4464492e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x =payments[payments.is_Fraud==1].amount, color='violet');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bb1a515",
   "metadata": {},
   "source": [
    "In the graphic above we can observe from the median that the data doesn't follow a simetric distribution. In this case this follow a positive asimetric distribution wich means that the median is closer to the first quartil.We can see that for data greater than de median the dispersion is higher so there's a higher difference bewteen the amounts values so we say that it is right skewed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5ff21545",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "92445516.64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.amount.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e4c90c3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "sns.boxplot(x ='is_Fraud', y = 'amount', data = payments[payments.amount < 10000],palette=\"Purples\");\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cecb7c9b",
   "metadata": {},
   "source": [
    "For payments lower than 1e5 we can observe that the data is asimetric for amounts where no fraud exist and the median is closer to low value amounts which is saying that fraud tend to ocurr quite often in smalls amount transfers.Between 0-100k, frauds tend to have larger transactions, with an average of 40k."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2885dbea",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c6a946cc",
   "metadata": {},
   "source": [
    "### Categorical Attributes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "33dabad6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>name_Orig</th>\n",
       "      <th>name_Dest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6362620</td>\n",
       "      <td>6362620</td>\n",
       "      <td>6362620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>5</td>\n",
       "      <td>6353307</td>\n",
       "      <td>2722362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>C1902386530</td>\n",
       "      <td>C1286084959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>2237500</td>\n",
       "      <td>3</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            type    name_Orig    name_Dest\n",
       "count    6362620      6362620      6362620\n",
       "unique         5      6353307      2722362\n",
       "top     CASH-OUT  C1902386530  C1286084959\n",
       "freq     2237500            3          113"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_attributes.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f40892e",
   "metadata": {},
   "source": [
    "\n",
    "- The majority type is cash_out with 2237500.\n",
    "\n",
    "- There's more fraud than the flagged fraud, it shows that the current method can't recognize fraud efficiently."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f12eba2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#payments.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "beec28a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure(figsize=(10, 10))\n",
    "sns.set(style='white')\n",
    "mask=np.triu(np.ones_like(payments.corr(), dtype=bool))\n",
    "cmap=sns.diverging_palette(0, 10, as_cmap=True)\n",
    "sns.heatmap(payments.corr(),\n",
    "           mask=mask,\n",
    "          cmap='BuPu',\n",
    "          center=0,\n",
    "          square=True,\n",
    "          annot=True,\n",
    "          linewidths=0.5,\n",
    "          cbar_kws={'shrink': 0.5}); "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2728f939",
   "metadata": {},
   "source": [
    "Things we can conclude from this heatmap:\n",
    "\n",
    "- OldbalanceOrg and NewbalanceOrg are highly correlated.\n",
    "- OldbalanceDest and NewbalanceDest are highly correlated.\n",
    "- There is not much relation between the features, so we need to understand where the relationship between them depends on the type of transaction and amount. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6cf676c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total number of fraud transaction is 8213.\n",
      "The total number of fraud transaction which is marked as fraud 16.\n"
     ]
    }
   ],
   "source": [
    "print('The total number of fraud transaction is {}.'.format(payments.is_Fraud.sum()))\n",
    "print('The total number of fraud transaction which is marked as fraud {}.'.format(payments.is_Flagged_Fraud.sum()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0bc5ca19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['PAYMENT', 'TRANSFER', 'CASH-OUT', 'DEBIT', 'CASH-IN'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "types_of_payments = payments.type.unique()\n",
    "types_of_payments"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10050415",
   "metadata": {},
   "source": [
    "- There are five transactions type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6dacebe7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "type\n",
       "CASH-IN     1399284\n",
       "CASH-OUT    2237500\n",
       "DEBIT         41432\n",
       "PAYMENT     2151495\n",
       "TRANSFER     532909\n",
       "Name: is_Fraud, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count2 = payments.groupby(by ='type').is_Fraud.count()  # Number of transactions per type.\n",
    "count2                        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b338e0d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>name_Orig</th>\n",
       "      <th>old_balance_Org</th>\n",
       "      <th>new_balance_Orig</th>\n",
       "      <th>name_Dest</th>\n",
       "      <th>old_balance_Dest</th>\n",
       "      <th>new_balance_Dest</th>\n",
       "      <th>is_Fraud</th>\n",
       "      <th>is_Flagged_Fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2736447</th>\n",
       "      <td>212</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1510987794</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1696624817</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3247298</th>\n",
       "      <td>250</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C521393327</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C480398193</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3760289</th>\n",
       "      <td>279</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C539112012</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1106468520</td>\n",
       "      <td>538547.63</td>\n",
       "      <td>538547.63</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5563714</th>\n",
       "      <td>387</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1294472700</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1325541393</td>\n",
       "      <td>7970766.57</td>\n",
       "      <td>7970766.57</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5996408</th>\n",
       "      <td>425</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C832555372</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1462759334</td>\n",
       "      <td>76759.90</td>\n",
       "      <td>76759.90</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5996410</th>\n",
       "      <td>425</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C69493310</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C719711728</td>\n",
       "      <td>2921531.34</td>\n",
       "      <td>2921531.34</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6168500</th>\n",
       "      <td>554</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C10965156</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1493336195</td>\n",
       "      <td>230289.66</td>\n",
       "      <td>230289.66</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6205440</th>\n",
       "      <td>586</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1303719003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C900608348</td>\n",
       "      <td>1328472.86</td>\n",
       "      <td>1328472.86</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6266414</th>\n",
       "      <td>617</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1971175979</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1352345416</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6281483</th>\n",
       "      <td>646</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C2060908932</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1587892888</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6281485</th>\n",
       "      <td>646</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1997645312</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C601248796</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6296015</th>\n",
       "      <td>671</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1960007029</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C459118517</td>\n",
       "      <td>27938.72</td>\n",
       "      <td>27938.72</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6351226</th>\n",
       "      <td>702</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1461113533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1382150537</td>\n",
       "      <td>107777.02</td>\n",
       "      <td>107777.02</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362461</th>\n",
       "      <td>730</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C729003789</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1388096959</td>\n",
       "      <td>1008609.53</td>\n",
       "      <td>1008609.53</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362463</th>\n",
       "      <td>730</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C2088151490</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1156763710</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362585</th>\n",
       "      <td>741</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C312737633</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1400061387</td>\n",
       "      <td>267522.87</td>\n",
       "      <td>267522.87</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         step      type  amount    name_Orig  old_balance_Org  \\\n",
       "2736447   212  CASH-OUT     0.0  C1510987794              0.0   \n",
       "3247298   250  CASH-OUT     0.0   C521393327              0.0   \n",
       "3760289   279  CASH-OUT     0.0   C539112012              0.0   \n",
       "5563714   387  CASH-OUT     0.0  C1294472700              0.0   \n",
       "5996408   425  CASH-OUT     0.0   C832555372              0.0   \n",
       "5996410   425  CASH-OUT     0.0    C69493310              0.0   \n",
       "6168500   554  CASH-OUT     0.0    C10965156              0.0   \n",
       "6205440   586  CASH-OUT     0.0  C1303719003              0.0   \n",
       "6266414   617  CASH-OUT     0.0  C1971175979              0.0   \n",
       "6281483   646  CASH-OUT     0.0  C2060908932              0.0   \n",
       "6281485   646  CASH-OUT     0.0  C1997645312              0.0   \n",
       "6296015   671  CASH-OUT     0.0  C1960007029              0.0   \n",
       "6351226   702  CASH-OUT     0.0  C1461113533              0.0   \n",
       "6362461   730  CASH-OUT     0.0   C729003789              0.0   \n",
       "6362463   730  CASH-OUT     0.0  C2088151490              0.0   \n",
       "6362585   741  CASH-OUT     0.0   C312737633              0.0   \n",
       "\n",
       "         new_balance_Orig    name_Dest  old_balance_Dest  new_balance_Dest  \\\n",
       "2736447               0.0  C1696624817              0.00              0.00   \n",
       "3247298               0.0   C480398193              0.00              0.00   \n",
       "3760289               0.0  C1106468520         538547.63         538547.63   \n",
       "5563714               0.0  C1325541393        7970766.57        7970766.57   \n",
       "5996408               0.0  C1462759334          76759.90          76759.90   \n",
       "5996410               0.0   C719711728        2921531.34        2921531.34   \n",
       "6168500               0.0  C1493336195         230289.66         230289.66   \n",
       "6205440               0.0   C900608348        1328472.86        1328472.86   \n",
       "6266414               0.0  C1352345416              0.00              0.00   \n",
       "6281483               0.0  C1587892888              0.00              0.00   \n",
       "6281485               0.0   C601248796              0.00              0.00   \n",
       "6296015               0.0   C459118517          27938.72          27938.72   \n",
       "6351226               0.0  C1382150537         107777.02         107777.02   \n",
       "6362461               0.0  C1388096959        1008609.53        1008609.53   \n",
       "6362463               0.0  C1156763710              0.00              0.00   \n",
       "6362585               0.0  C1400061387         267522.87         267522.87   \n",
       "\n",
       "         is_Fraud  is_Flagged_Fraud  \n",
       "2736447         1                 0  \n",
       "3247298         1                 0  \n",
       "3760289         1                 0  \n",
       "5563714         1                 0  \n",
       "5996408         1                 0  \n",
       "5996410         1                 0  \n",
       "6168500         1                 0  \n",
       "6205440         1                 0  \n",
       "6266414         1                 0  \n",
       "6281483         1                 0  \n",
       "6281485         1                 0  \n",
       "6296015         1                 0  \n",
       "6351226         1                 0  \n",
       "6362461         1                 0  \n",
       "6362463         1                 0  \n",
       "6362585         1                 0  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments[(payments['type']== 'CASH-OUT')&(payments['amount']== 0)]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "72feaa9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "type      is_Fraud\n",
       "CASH-IN   0           1399284\n",
       "CASH-OUT  0           2233384\n",
       "          1              4116\n",
       "DEBIT     0             41432\n",
       "PAYMENT   0           2151495\n",
       "TRANSFER  0            528812\n",
       "          1              4097\n",
       "Name: is_Fraud, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.groupby(by ='type').is_Fraud.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97ee111b",
   "metadata": {},
   "source": [
    "Here we can observe that from all transactions made with different methos CASH-OUT AND TRANSFER are more likely to fraud. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ecccbc35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = ['Not a Fraud', 'Fraud']\n",
    "colors = ['orchid', 'gray']\n",
    "size = [6354407, 8213]\n",
    "explode = [0.1, 0.21]\n",
    "\n",
    "plt.rcParams['figure.figsize'] = (10, 10)\n",
    "plt.pie(size, labels = labels, colors = colors, explode = explode, shadow = True)\n",
    "plt.axis('off')\n",
    "plt.title('Total number of frauds',fontsize = 20)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fa8e3e1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    6354407\n",
       "1       8213\n",
       "Name: is_Fraud, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.is_Fraud.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "abaa50e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# checking the different values of amounts transationed\n",
    "\n",
    "plt.rcParams['figure.figsize'] = (10, 7)\n",
    "\n",
    "payments['amount'].value_counts().head(10).plot.bar(color = 'cornflowerblue')\n",
    "plt.title('10 Most Common Transaction amounts', fontsize = 20)\n",
    "plt.xlabel('Amounts')\n",
    "plt.ylabel('count')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ff215c21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of fraudulent TRANSFERs = 4097\n",
      "The number of fraudulent CASH_OUTs = 4116\n"
     ]
    }
   ],
   "source": [
    "# figuring out the fraud transfer and fraud cash outs\n",
    "fraudTransfer = payments.loc[(payments.is_Fraud == 1) & (payments.type == 'TRANSFER')]\n",
    "fraudCashout = payments.loc[(payments.is_Fraud == 1) & (payments.type == 'CASH-OUT')]\n",
    "\n",
    "\n",
    "#printing the number of fraudulent transfers ans cash outs\n",
    "print ('The number of fraudulent TRANSFERs = {}'.format(len(fraudTransfer)))\n",
    "print ('The number of fraudulent CASH_OUTs = {}'.format(len(fraudCashout)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21c36910",
   "metadata": {},
   "source": [
    "- If we take a look at the pie chart we could hesitate to say that since there are more transactions in DEBIT, TRANSFER AND PAYMENT types. \n",
    "- If we go deeper and drill down each type we see that the type of payments with more actual frauds are CASH OUT followed by TRANSFER. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1cc46e4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TRANSFER Transaction\n",
      "Minimum Transaction : 63.8\n",
      "Maximum Transaction : 10000000.0\n",
      "CASH-OUT Transaction\n",
      "Minimum Transaction : 0.0\n",
      "Maximum Transaction : 10000000.0\n"
     ]
    }
   ],
   "source": [
    "# finding out the minimum and maximum transaction from Transfer and cash out transaction mode when it is set to be Fraud\n",
    "\n",
    "print(\"TRANSFER Transaction\")\n",
    "\n",
    "print(\"Minimum Transaction :\", payments.loc[(payments.is_Fraud == 1) & (payments.type == 'TRANSFER')].amount.min())\n",
    "print(\"Maximum Transaction :\", payments.loc[(payments.is_Fraud == 1) & (payments.type == 'TRANSFER')].amount.max())\n",
    "\n",
    "print(\"CASH-OUT Transaction\")\n",
    "\n",
    "print(\"Minimum Transaction :\", payments.loc[(payments.is_Fraud == 1) & (payments.type == 'CASH-OUT')].amount.min())\n",
    "print(\"Maximum Transaction :\", payments.loc[(payments.is_Fraud == 1) & (payments.type == 'CASH-OUT')].amount.max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bbd77402",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# fraud \n",
    "colors = ['#FF9CEE', '#97A2FF', '#D5AAFF','#909090','#FFCBC1','#AFF8DB','#C1CD97']\n",
    "ax = payments.groupby(['type', 'is_Fraud']).size().plot(kind='bar',color = colors)\n",
    "ax.set_title(\"Number of transactions which are the actual fraud per transaction type\")\n",
    "ax.set_xlabel(\"Transaction Type\")\n",
    "ax.set_ylabel(\"Number of transactions\");\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "12c3a7e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "is_Fraud\n",
       "0    6354407\n",
       "1       8213\n",
       "Name: amount, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.groupby(by= 'is_Fraud').amount.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e3a88501",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "colors = ['#FF9CEE', '#97A2FF', '#D5AAFF']\n",
    "\n",
    "ax = payments[payments['is_Fraud'] ==1].groupby(['type', 'is_Flagged_Fraud'])['amount'].sum().plot(kind='bar',color = colors)\n",
    "# ax = raw_data[raw_data['isFraud'] ==1].groupby(['type', 'isFlaggedFraud'])['amount'].mean().plot(kind='bar')\n",
    "# ax = raw_data.groupby(['type', 'isFlaggedFraud'])['amount'].mean().plot(kind='bar')\n",
    "ax.set_title(\"Total Loss Amount: Actual Fraud vs. IT System Flagged Fraud\")\n",
    "ax.set_xlabel(\"(Transaction Type, 0 = Not Flagged Fraud | 1 = Flagged Fraud)\")\n",
    "ax.set_ylabel(\"Sum of amount\")\n",
    "for p in ax.patches:\n",
    "    ax.annotate(str(format(int(p.get_height()), ',d')), (p.get_x(), p.get_height()*1.01))\n",
    "                                                                                                "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c73d575",
   "metadata": {},
   "source": [
    "Ratio of detected fraud amount over total fraud amount is :\n",
    "77,785,563 / (5,989,202,242 + 5,989427620 + 77,785,563) = 0.64518 %\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "429b125e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "type      is_Fraud\n",
       "CASH-IN   0           2.363674e+11\n",
       "CASH-OUT  0           3.884238e+11\n",
       "          1           5.989202e+09\n",
       "DEBIT     0           2.271992e+08\n",
       "PAYMENT   0           2.809337e+10\n",
       "TRANSFER  0           4.792248e+11\n",
       "          1           6.067213e+09\n",
       "Name: amount, dtype: float64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_multiples = payments.groupby(['type', 'is_Fraud']).amount.sum()\n",
    "grouped_multiples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9f6b83bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "type      is_Fraud\n",
       "CASH-IN   0           1399284\n",
       "CASH-OUT  0           2233384\n",
       "          1              4116\n",
       "DEBIT     0             41432\n",
       "PAYMENT   0           2151495\n",
       "TRANSFER  0            528812\n",
       "          1              4097\n",
       "Name: is_Fraud, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "suspicious_amount = payments.groupby(by ='type').is_Fraud.value_counts()\n",
    "suspicious_amount"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d06c3dcf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "type      is_Flagged_Fraud\n",
       "CASH-IN   0                   2.363674e+11\n",
       "CASH-OUT  0                   3.944130e+11\n",
       "DEBIT     0                   2.271992e+08\n",
       "PAYMENT   0                   2.809337e+10\n",
       "TRANSFER  0                   4.852142e+11\n",
       "          1                   7.778556e+07\n",
       "Name: amount, dtype: float64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_multiple = payments.groupby(['type', 'is_Flagged_Fraud']).amount.sum()\n",
    "grouped_multiple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c5e684b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>name_Orig</th>\n",
       "      <th>old_balance_Org</th>\n",
       "      <th>new_balance_Orig</th>\n",
       "      <th>name_Dest</th>\n",
       "      <th>old_balance_Dest</th>\n",
       "      <th>new_balance_Dest</th>\n",
       "      <th>is_Fraud</th>\n",
       "      <th>is_Flagged_Fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>9839.64</td>\n",
       "      <td>C1231006815</td>\n",
       "      <td>170136.0</td>\n",
       "      <td>160296.36</td>\n",
       "      <td>M1979787155</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>1864.28</td>\n",
       "      <td>C1666544295</td>\n",
       "      <td>21249.0</td>\n",
       "      <td>19384.72</td>\n",
       "      <td>M2044282225</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C1305486145</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>C553264065</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C840083671</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>C38997010</td>\n",
       "      <td>21182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>11668.14</td>\n",
       "      <td>C2048537720</td>\n",
       "      <td>41554.0</td>\n",
       "      <td>29885.86</td>\n",
       "      <td>M1230701703</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   step      type    amount    name_Orig  old_balance_Org  new_balance_Orig  \\\n",
       "0     1   PAYMENT   9839.64  C1231006815         170136.0         160296.36   \n",
       "1     1   PAYMENT   1864.28  C1666544295          21249.0          19384.72   \n",
       "2     1  TRANSFER    181.00  C1305486145            181.0              0.00   \n",
       "3     1  CASH-OUT    181.00   C840083671            181.0              0.00   \n",
       "4     1   PAYMENT  11668.14  C2048537720          41554.0          29885.86   \n",
       "\n",
       "     name_Dest  old_balance_Dest  new_balance_Dest  is_Fraud  is_Flagged_Fraud  \n",
       "0  M1979787155               0.0               0.0         0                 0  \n",
       "1  M2044282225               0.0               0.0         0                 0  \n",
       "2   C553264065               0.0               0.0         1                 0  \n",
       "3    C38997010           21182.0               0.0         1                 0  \n",
       "4  M1230701703               0.0               0.0         0                 0  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "payments.head() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cea4233",
   "metadata": {},
   "source": [
    "- We can observe that fraudulent transactions tend to be of smaller amounts. On the other hand, we confirm that frauds behave in the same way for both transfers and cash out. \n",
    "Not only in frauds, but also in non-fraudulent transactions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92dab79e",
   "metadata": {},
   "source": [
    "### Analysis of fraudelent transactions \n",
    "\n",
    "\n",
    "- Since Transfer and Cash-out are more suceptible to fraud I will keep information about this two in order to make predictions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "90f7cb18",
   "metadata": {},
   "outputs": [],
   "source": [
    "fraud_payments = payments.loc[(payments.type == 'TRANSFER') | (payments.type == 'CASH-OUT')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b5ff1f59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>name_Orig</th>\n",
       "      <th>old_balance_Org</th>\n",
       "      <th>new_balance_Orig</th>\n",
       "      <th>name_Dest</th>\n",
       "      <th>old_balance_Dest</th>\n",
       "      <th>new_balance_Dest</th>\n",
       "      <th>is_Fraud</th>\n",
       "      <th>is_Flagged_Fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C1305486145</td>\n",
       "      <td>181.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C553264065</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C840083671</td>\n",
       "      <td>181.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C38997010</td>\n",
       "      <td>21182.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>229133.94</td>\n",
       "      <td>C905080434</td>\n",
       "      <td>15325.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C476402209</td>\n",
       "      <td>5083.00</td>\n",
       "      <td>51513.44</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>215310.30</td>\n",
       "      <td>C1670993182</td>\n",
       "      <td>705.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1100439041</td>\n",
       "      <td>22425.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>311685.89</td>\n",
       "      <td>C1984094095</td>\n",
       "      <td>10835.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C932583850</td>\n",
       "      <td>6267.00</td>\n",
       "      <td>2719172.89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362615</th>\n",
       "      <td>743</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>339682.13</td>\n",
       "      <td>C786484425</td>\n",
       "      <td>339682.13</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C776919290</td>\n",
       "      <td>0.00</td>\n",
       "      <td>339682.13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362616</th>\n",
       "      <td>743</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>6311409.28</td>\n",
       "      <td>C1529008245</td>\n",
       "      <td>6311409.28</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1881841831</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362617</th>\n",
       "      <td>743</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>6311409.28</td>\n",
       "      <td>C1162922333</td>\n",
       "      <td>6311409.28</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1365125890</td>\n",
       "      <td>68488.84</td>\n",
       "      <td>6379898.11</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362618</th>\n",
       "      <td>743</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>850002.52</td>\n",
       "      <td>C1685995037</td>\n",
       "      <td>850002.52</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C2080388513</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362619</th>\n",
       "      <td>743</td>\n",
       "      <td>CASH-OUT</td>\n",
       "      <td>850002.52</td>\n",
       "      <td>C1280323807</td>\n",
       "      <td>850002.52</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C873221189</td>\n",
       "      <td>6510099.11</td>\n",
       "      <td>7360101.63</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2770409 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         step      type      amount    name_Orig  old_balance_Org  \\\n",
       "2           1  TRANSFER      181.00  C1305486145           181.00   \n",
       "3           1  CASH-OUT      181.00   C840083671           181.00   \n",
       "15          1  CASH-OUT   229133.94   C905080434         15325.00   \n",
       "19          1  TRANSFER   215310.30  C1670993182           705.00   \n",
       "24          1  TRANSFER   311685.89  C1984094095         10835.00   \n",
       "...       ...       ...         ...          ...              ...   \n",
       "6362615   743  CASH-OUT   339682.13   C786484425        339682.13   \n",
       "6362616   743  TRANSFER  6311409.28  C1529008245       6311409.28   \n",
       "6362617   743  CASH-OUT  6311409.28  C1162922333       6311409.28   \n",
       "6362618   743  TRANSFER   850002.52  C1685995037        850002.52   \n",
       "6362619   743  CASH-OUT   850002.52  C1280323807        850002.52   \n",
       "\n",
       "         new_balance_Orig    name_Dest  old_balance_Dest  new_balance_Dest  \\\n",
       "2                     0.0   C553264065              0.00              0.00   \n",
       "3                     0.0    C38997010          21182.00              0.00   \n",
       "15                    0.0   C476402209           5083.00          51513.44   \n",
       "19                    0.0  C1100439041          22425.00              0.00   \n",
       "24                    0.0   C932583850           6267.00        2719172.89   \n",
       "...                   ...          ...               ...               ...   \n",
       "6362615               0.0   C776919290              0.00         339682.13   \n",
       "6362616               0.0  C1881841831              0.00              0.00   \n",
       "6362617               0.0  C1365125890          68488.84        6379898.11   \n",
       "6362618               0.0  C2080388513              0.00              0.00   \n",
       "6362619               0.0   C873221189        6510099.11        7360101.63   \n",
       "\n",
       "         is_Fraud  is_Flagged_Fraud  \n",
       "2               1                 0  \n",
       "3               1                 0  \n",
       "15              0                 0  \n",
       "19              0                 0  \n",
       "24              0                 0  \n",
       "...           ...               ...  \n",
       "6362615         1                 0  \n",
       "6362616         1                 0  \n",
       "6362617         1                 0  \n",
       "6362618         1                 0  \n",
       "6362619         1                 0  \n",
       "\n",
       "[2770409 rows x 11 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fraud_payments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "6778caab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "type      step\n",
       "CASH-OUT  19      19822\n",
       "          18      19440\n",
       "          187     18646\n",
       "          235     18494\n",
       "          139     17980\n",
       "                  ...  \n",
       "TRANSFER  721         2\n",
       "          725         2\n",
       "          729         2\n",
       "          112         1\n",
       "          662         1\n",
       "Name: step, Length: 1486, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fraud_payments.groupby(by ='type').step.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "63f9e2d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "fraud_payments.loc[fraud_payments.type == 'TRANSFER', 'type'] = 0\n",
    "fraud_payments.loc[fraud_payments.type == 'CASH-OUT', 'type'] = 1\n",
    "fraud_payments.type = fraud_payments.type.astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1482efd3",
   "metadata": {},
   "source": [
    "# MACHINE LEARNING \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "722279e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "fraud_payments_copy = fraud_payments.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "ec047af5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>name_Orig</th>\n",
       "      <th>old_balance_Org</th>\n",
       "      <th>new_balance_Orig</th>\n",
       "      <th>name_Dest</th>\n",
       "      <th>old_balance_Dest</th>\n",
       "      <th>new_balance_Dest</th>\n",
       "      <th>is_Fraud</th>\n",
       "      <th>is_Flagged_Fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C1305486145</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C553264065</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C840083671</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C38997010</td>\n",
       "      <td>21182.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>229133.94</td>\n",
       "      <td>C905080434</td>\n",
       "      <td>15325.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C476402209</td>\n",
       "      <td>5083.0</td>\n",
       "      <td>51513.44</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>215310.30</td>\n",
       "      <td>C1670993182</td>\n",
       "      <td>705.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C1100439041</td>\n",
       "      <td>22425.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>311685.89</td>\n",
       "      <td>C1984094095</td>\n",
       "      <td>10835.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C932583850</td>\n",
       "      <td>6267.0</td>\n",
       "      <td>2719172.89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    step  type     amount    name_Orig  old_balance_Org  new_balance_Orig  \\\n",
       "2      1     0     181.00  C1305486145            181.0               0.0   \n",
       "3      1     1     181.00   C840083671            181.0               0.0   \n",
       "15     1     1  229133.94   C905080434          15325.0               0.0   \n",
       "19     1     0  215310.30  C1670993182            705.0               0.0   \n",
       "24     1     0  311685.89  C1984094095          10835.0               0.0   \n",
       "\n",
       "      name_Dest  old_balance_Dest  new_balance_Dest  is_Fraud  \\\n",
       "2    C553264065               0.0              0.00         1   \n",
       "3     C38997010           21182.0              0.00         1   \n",
       "15   C476402209            5083.0          51513.44         0   \n",
       "19  C1100439041           22425.0              0.00         0   \n",
       "24   C932583850            6267.0        2719172.89         0   \n",
       "\n",
       "    is_Flagged_Fraud  \n",
       "2                  0  \n",
       "3                  0  \n",
       "15                 0  \n",
       "19                 0  \n",
       "24                 0  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fraud_payments_copy.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8c451595",
   "metadata": {},
   "outputs": [],
   "source": [
    "fraud_payments_copy= fraud_payments.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "2a976cf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = fraud_payments_copy.drop(columns=['is_Fraud', 'is_Flagged_Fraud', 'name_Orig', 'name_Dest', \n",
    "                      'step'], axis=1)[:1000000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "623915bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>old_balance_Org</th>\n",
       "      <th>new_balance_Orig</th>\n",
       "      <th>old_balance_Dest</th>\n",
       "      <th>new_balance_Dest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>181.00</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>181.00</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21182.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "      <td>229133.94</td>\n",
       "      <td>15325.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5083.0</td>\n",
       "      <td>51513.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>215310.30</td>\n",
       "      <td>705.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22425.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0</td>\n",
       "      <td>311685.89</td>\n",
       "      <td>10835.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6267.0</td>\n",
       "      <td>2719172.89</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    type     amount  old_balance_Org  new_balance_Orig  old_balance_Dest  \\\n",
       "2      0     181.00            181.0               0.0               0.0   \n",
       "3      1     181.00            181.0               0.0           21182.0   \n",
       "15     1  229133.94          15325.0               0.0            5083.0   \n",
       "19     0  215310.30            705.0               0.0           22425.0   \n",
       "24     0  311685.89          10835.0               0.0            6267.0   \n",
       "\n",
       "    new_balance_Dest  \n",
       "2               0.00  \n",
       "3               0.00  \n",
       "15          51513.44  \n",
       "19              0.00  \n",
       "24        2719172.89  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "dc4342d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = fraud_payments_copy['is_Fraud'][:1000000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "f76fe8d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.concat([X, y], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82fc9c90",
   "metadata": {},
   "source": [
    "## Test Train Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "714964a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b889094",
   "metadata": {},
   "source": [
    "## Training and Predicting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "35006a51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: xgboost in /Users/lcorrea/opt/anaconda3/lib/python3.9/site-packages (1.6.2)\n",
      "Requirement already satisfied: numpy in /Users/lcorrea/opt/anaconda3/lib/python3.9/site-packages (from xgboost) (1.21.5)\n",
      "Requirement already satisfied: scipy in /Users/lcorrea/opt/anaconda3/lib/python3.9/site-packages (from xgboost) (1.7.3)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "%pip install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "f51420f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogReg\n",
      "xgbc\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>modelos</th>\n",
       "      <th>acc_score</th>\n",
       "      <th>prec_score</th>\n",
       "      <th>rec_score</th>\n",
       "      <th>f1_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LogReg</td>\n",
       "      <td>0.998465</td>\n",
       "      <td>0.673786</td>\n",
       "      <td>0.713992</td>\n",
       "      <td>0.693307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>xgbc</td>\n",
       "      <td>0.999345</td>\n",
       "      <td>0.965879</td>\n",
       "      <td>0.757202</td>\n",
       "      <td>0.848904</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  modelos  acc_score  prec_score  rec_score  f1_score\n",
       "0  LogReg   0.998465    0.673786   0.713992  0.693307\n",
       "1    xgbc   0.999345    0.965879   0.757202  0.848904"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelos=[logreg, xgbc]\n",
    "\n",
    "modelos_name=['LogReg','xgbc']\n",
    "\n",
    "balacc_score=[]\n",
    "prec_score=[]\n",
    "rec_score=[]\n",
    "f1_score=[]\n",
    "acc_score=[]\n",
    "for i,m in enumerate(modelos):\n",
    "    m.fit(X_train, y_train)\n",
    "    y_pred=m.predict(X_test)\n",
    "    acc_score.append(acc(y_test, y_pred))\n",
    "    prec_score.append(prec(y_test, y_pred))\n",
    "    rec_score.append(rec(y_test, y_pred))\n",
    "    f1_score.append(f1(y_test, y_pred))\n",
    "    print(modelos_name[i])\n",
    "analisis= pd.DataFrame({\"modelos\" : modelos_name, \"acc_score\" : acc_score, \"prec_score\" : prec_score, \"rec_score\" : rec_score, \"f1_score\" : f1_score})\n",
    "analisis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2741fbe8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ca5641d9",
   "metadata": {},
   "source": [
    "## Conclussions "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a81352f7",
   "metadata": {},
   "source": [
    "- Existing rule-based system is not capable of detection of all the fraud transaction.\n",
    "\n",
    "- Machine learning can be used for the detection of fraud transaction.\n",
    "\n",
    "- Predictive models produce good precision score and are capable of detection of fraud transaction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89b6a101",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
